
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AmmpairScalarFieldEnum = {
  id: 'id',
  pair: 'pair',
  creator: 'creator',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  token0Address: 'token0Address',
  token1Address: 'token1Address',
  network: 'network',
  token0Network: 'token0Network',
  token1Network: 'token1Network',
  verified: 'verified',
  displayOrder: 'displayOrder',
  apr24h: 'apr24h',
  apr7d: 'apr7d',
  apyCalculated: 'apyCalculated',
  lastStatsUpdate: 'lastStatsUpdate',
  lpFeePercent: 'lpFeePercent',
  reserve0: 'reserve0',
  reserve1: 'reserve1',
  tvlUsd: 'tvlUsd',
  volumeToken0_24h: 'volumeToken0_24h',
  volumeToken1_24h: 'volumeToken1_24h',
  volumeUsd24h: 'volumeUsd24h',
  volumeUsd7d: 'volumeUsd7d',
  volumeUsd30d: 'volumeUsd30d',
  feesUsd24h: 'feesUsd24h',
  feesUsd7d: 'feesUsd7d',
  feesUsd30d: 'feesUsd30d'
};

exports.Prisma.EventTrackingScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  blockHeight: 'blockHeight',
  transactionHash: 'transactionHash',
  processed: 'processed',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  network: 'network',
  sequenceNumber: 'sequenceNumber'
};

exports.Prisma.GameResultScalarFieldEnum = {
  id: 'id',
  nonce: 'nonce',
  player: 'player',
  playerMove: 'playerMove',
  houseMove: 'houseMove',
  betAmount: 'betAmount',
  outcome: 'outcome',
  payoutAmount: 'payoutAmount',
  coinTypeName: 'coinTypeName',
  season: 'season',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  network: 'network'
};

exports.Prisma.PoolsDBScalarFieldEnum = {
  id: 'id',
  description: 'description',
  dev: 'dev',
  initialVirtualSupraReserves: 'initialVirtualSupraReserves',
  initialVirtualTokenReserves: 'initialVirtualTokenReserves',
  name: 'name',
  platformFee: 'platformFee',
  pool: 'pool',
  symbol: 'symbol',
  telegram: 'telegram',
  tokenAddress: 'tokenAddress',
  tokenDecimals: 'tokenDecimals',
  twitter: 'twitter',
  uri: 'uri',
  website: 'website',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  network: 'network',
  displayOrder: 'displayOrder',
  github: 'github',
  stream: 'stream',
  unstakePeriodSeconds: 'unstakePeriodSeconds',
  project_type: 'project_type'
};

exports.Prisma.TradeEventScalarFieldEnum = {
  id: 'id',
  type: 'type',
  creationNumber: 'creationNumber',
  accountAddress: 'accountAddress',
  sequenceNumber: 'sequenceNumber',
  timestamp: 'timestamp',
  isBuy: 'isBuy',
  supraAmount: 'supraAmount',
  tokenAddress: 'tokenAddress',
  tokenAmount: 'tokenAmount',
  user: 'user',
  virtualSupraReserves: 'virtualSupraReserves',
  virtualTokenReserves: 'virtualTokenReserves',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  network: 'network',
  processedForOHLC: 'processedForOHLC'
};

exports.Prisma.VRFCallbackScalarFieldEnum = {
  id: 'id',
  callerAddress: 'callerAddress',
  nonce: 'nonce',
  randomNumbers: 'randomNumbers',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  network: 'network'
};

exports.Prisma.Block_progressScalarFieldEnum = {
  network: 'network',
  lastBlockHeight: 'lastBlockHeight',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentsScalarFieldEnum = {
  id: 'id',
  text: 'text',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  poolId: 'poolId',
  network: 'network',
  userNetwork: 'userNetwork',
  userWalletAddress: 'userWalletAddress',
  displayOrder: 'displayOrder',
  likeCount: 'likeCount',
  poolNetwork: 'poolNetwork'
};

exports.Prisma.ImagesScalarFieldEnum = {
  id: 'id',
  url: 'url',
  altText: 'altText',
  createdAt: 'createdAt',
  commentId: 'commentId'
};

exports.Prisma.LikesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  commentId: 'commentId',
  network: 'network',
  userNetwork: 'userNetwork',
  userWalletAddress: 'userWalletAddress'
};

exports.Prisma.Migration_eventsScalarFieldEnum = {
  id: 'id',
  network: 'network',
  transactionHash: 'transactionHash',
  sequenceNumber: 'sequenceNumber',
  token_address: 'token_address',
  migrator: 'migrator',
  supra_sent_to_lp: 'supra_sent_to_lp',
  tokens_sent_to_lp: 'tokens_sent_to_lp',
  dev_reward_staked: 'dev_reward_staked',
  staking_pool_reward: 'staking_pool_reward',
  migrator_reward: 'migrator_reward',
  excess_supra_collected: 'excess_supra_collected',
  createdAt: 'createdAt'
};

exports.Prisma.Protocol_statsScalarFieldEnum = {
  id: 'id',
  network: 'network',
  timestamp: 'timestamp',
  totalTvlUsd: 'totalTvlUsd',
  ammTvlUsd: 'ammTvlUsd',
  virtualPoolsTvlUsd: 'virtualPoolsTvlUsd',
  stakingTvlUsd: 'stakingTvlUsd',
  totalVolume24hUsd: 'totalVolume24hUsd',
  ammVolume24hUsd: 'ammVolume24hUsd',
  totalUniqueUsers: 'totalUniqueUsers',
  totalFeesEarnedUsd24h: 'totalFeesEarnedUsd24h'
};

exports.Prisma.Staking_poolsScalarFieldEnum = {
  id: 'id',
  creatorAddress: 'creatorAddress',
  stakeTokenAddress: 'stakeTokenAddress',
  rewardTokenAddress: 'rewardTokenAddress',
  isDynamicPool: 'isDynamicPool',
  rewardPerSec: 'rewardPerSec',
  accumReward: 'accumReward',
  lastUpdatedTimestamp: 'lastUpdatedTimestamp',
  startTimestamp: 'startTimestamp',
  endTimestamp: 'endTimestamp',
  emergencyLocked: 'emergencyLocked',
  stakesClosed: 'stakesClosed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorNetwork: 'creatorNetwork',
  network: 'network',
  rewardTokenNetwork: 'rewardTokenNetwork',
  stakeTokenNetwork: 'stakeTokenNetwork',
  boostEnabled: 'boostEnabled',
  initialEndTimestamp: 'initialEndTimestamp',
  initialRewardPerSec: 'initialRewardPerSec',
  verified: 'verified',
  totalBoosted: 'totalBoosted',
  displayOrder: 'displayOrder',
  cachedApy: 'cachedApy',
  cachedStakerCount: 'cachedStakerCount',
  cachedTvlUsd: 'cachedTvlUsd',
  poolType: 'poolType',
  totalStakedAmount: 'totalStakedAmount',
  boostConfigCollectionName: 'boostConfigCollectionName',
  boostConfigCollectionOwner: 'boostConfigCollectionOwner',
  boostConfigPercent: 'boostConfigPercent'
};

exports.Prisma.Token_price_historyScalarFieldEnum = {
  id: 'id',
  network: 'network',
  tokenAddress: 'tokenAddress',
  timestamp: 'timestamp',
  granularity: 'granularity',
  open: 'open',
  high: 'high',
  low: 'low',
  close: 'close',
  volume: 'volume'
};

exports.Prisma.Token_pricesScalarFieldEnum = {
  id: 'id',
  network: 'network',
  tokenAddress: 'tokenAddress',
  priceUsd: 'priceUsd',
  priceAnchor: 'priceAnchor',
  source: 'source',
  lastUpdatedAt: 'lastUpdatedAt'
};

exports.Prisma.TokensScalarFieldEnum = {
  id: 'id',
  name: 'name',
  symbol: 'symbol',
  decimals: 'decimals',
  iconUri: 'iconUri',
  projectUri: 'projectUri',
  network: 'network',
  lastMetadataAttempt: 'lastMetadataAttempt',
  metadataFetched: 'metadataFetched',
  metadataStandard: 'metadataStandard',
  verified: 'verified',
  displayOrder: 'displayOrder',
  originalCoinType: 'originalCoinType',
  circulatingSupply: 'circulatingSupply',
  createdAt: 'createdAt',
  marketCapUsd: 'marketCapUsd',
  priceChange24hPercent: 'priceChange24hPercent',
  priceUsdCurrent: 'priceUsdCurrent',
  priceAnchor: 'priceAnchor',
  lastPriceUpdate: 'lastPriceUpdate',
  totalSupply: 'totalSupply',
  updatedAt: 'updatedAt',
  volume24hUsd: 'volume24hUsd'
};

exports.Prisma.Trust_poolsScalarFieldEnum = {
  id: 'id',
  network: 'network',
  poolDbId: 'poolDbId',
  tokenAddress: 'tokenAddress',
  isActive: 'isActive',
  totalStakedAmount: 'totalStakedAmount',
  stakerCount: 'stakerCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.User_stakesScalarFieldEnum = {
  id: 'id',
  poolId: 'poolId',
  userNetwork: 'userNetwork',
  userAddress: 'userAddress',
  stakedAmount: 'stakedAmount',
  rewardDebt: 'rewardDebt',
  lastClaimTimestamp: 'lastClaimTimestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  walletAddress: 'walletAddress',
  username: 'username',
  avatarUrl: 'avatarUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  nonce: 'nonce',
  network: 'network'
};

exports.Prisma.Token_holdersScalarFieldEnum = {
  network: 'network',
  userWalletAddress: 'userWalletAddress',
  tokenAddress: 'tokenAddress',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AmmVersion = exports.$Enums.AmmVersion = {
  V1: 'V1',
  V2: 'V2',
  V3: 'V3',
  V4: 'V4'
};

exports.PoolType = exports.$Enums.PoolType = {
  MEME: 'MEME',
  LP: 'LP',
  DAO: 'DAO',
  BIG_DAO: 'BIG_DAO',
  GENERAL: 'GENERAL'
};

exports.Prisma.ModelName = {
  Ammpair: 'Ammpair',
  EventTracking: 'EventTracking',
  GameResult: 'GameResult',
  PoolsDB: 'PoolsDB',
  TradeEvent: 'TradeEvent',
  VRFCallback: 'VRFCallback',
  block_progress: 'block_progress',
  comments: 'comments',
  images: 'images',
  likes: 'likes',
  migration_events: 'migration_events',
  protocol_stats: 'protocol_stats',
  staking_pools: 'staking_pools',
  token_price_history: 'token_price_history',
  token_prices: 'token_prices',
  tokens: 'tokens',
  trust_pools: 'trust_pools',
  user_stakes: 'user_stakes',
  users: 'users',
  token_holders: 'token_holders'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
